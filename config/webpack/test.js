process.env.NODE_ENV = process.env.NODE_ENV || 'test'

/*
* This line allows us to run mochapack tests alongside webpack-dev-server.
*
* If RAILS_ENV is missing, webpacker will use the defaults in webpacker.yml.
*
* Since `publicPaths` defaults to `/packs`, the same as development, running tests would
* clobber development packs. In particular, the `manifest.json` generated by mochapack
* doesn't work for the dev-server.
*/
process.env.RAILS_ENV = process.env.RAILS_ENV || 'test'

const environment = require('./environment')
const nodeExternals = require('webpack-node-externals');

// Ignore styles
// See https://sysgears.github.io/mochapack/docs/installation/webpack-configuration.html#without-css-modules
environment.loaders.keys().forEach((key) => {
  if (key.match(/css|sass|moduleCss|moduleSass/)) {
    const loader = environment.loaders.get(key)
    delete loader.use
    loader.loader = 'null-loader'
  }
})

environment.config.merge({
  output: {
    devtoolModuleFilenameTemplate: '[absolute-resource-path]',
    devtoolFallbackModuleFilenameTemplate: '[absolute-resource-path]?[hash]'
  },
  mode: 'development',
  externals: [nodeExternals()],
  devtool: 'inline-cheap-module-source-map'
})


module.exports = environment.toWebpackConfig()
